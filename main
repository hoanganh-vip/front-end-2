const canvas = document.getElementById("canvas"); 
const ctx = canvas.getContext("2d");

const ROW = 18; // Số hàng
const COL = 10; // Số cột
const SQ = 40; // Kích thước mỗi ô
const COLOR = "WHITE"; // Màu sắc ô trống

let score = 0; // Điểm số

// Hàm vẽ hình vuông
function drawSquare(x, y, color) {
    ctx.fillStyle = color; // Đặt màu cho ô
    ctx.fillRect(x * SQ, y * SQ, SQ, SQ); // Vẽ hình vuông
    ctx.strokeStyle = "#ccc"; // Đặt màu cho viền
    ctx.strokeRect(x * SQ, y * SQ, SQ, SQ); // Vẽ viền
}

let board = []; // Bảng chơi
for (let r = 0; r < ROW; r++) { 
    board[r] = [];
    for (let c = 0; c < COL; c++) { 
        board[r][c] = COLOR; // Khởi tạo bảng với màu sắc trắng
    }
}

console.log(board); // In bảng ra console

// Hàm vẽ bảng
function drawBoard() {
    for (let r = 0; r < ROW; r++) {
        for (let c = 0; c < COL; c++) { 
            drawSquare(c, r, board[r][c]); // Vẽ từng ô trong bảng
        }
    }
}

drawBoard(); // Vẽ bảng lần đầu tiên

// Lớp cho các mảnh
class Piece {
    constructor(tetromino, color){
        this.tetromino = tetromino; // Định nghĩa mảnh
        this.color = color; // Màu của mảnh

        this.tetrominoN = 0; // Chỉ số mảnh hiện tại
        this.activeTetromino = this.tetromino[this.tetrominoN]; // Mảnh đang hoạt động

        this.x = 3; // Vị trí x của mảnh
        this.y = -2; // Vị trí y của mảnh
    }

    fill(color){
        for (let r = 0; r < this.activeTetromino.length; r++){
            for (let c = 0; c < this.activeTetromino[r].length; c++){ 
                if (this.activeTetromino[r][c]){
                    drawSquare(this.x + c, this.y + r, color); // Vẽ mảnh
                }
            }
        }
    }

    draw(){
        this.fill(this.color); // Vẽ mảnh với màu của nó
    }

    unDraw(){
        this.fill(COLOR); // Xóa mảnh bằng cách vẽ lại ô trống
    }

    moveDown(){
        if(!this.collision(0, 1, this.activeTetromino)){
            this.unDraw();
            this.y++;
            this.draw();
        } else {
            this.lock(); // Khóa mảnh
            p = randomPiece(); // Tạo mảnh mới
        }
    }
    
    moveLeft(){
        if(!this.collision(-1, 0, this.activeTetromino)){
            this.unDraw();
            this.x--;
            this.draw();
        }
    }
    
    moveRight(){
        if(!this.collision(1, 0, this.activeTetromino)){
            this.unDraw();
            this.x++;
            this.draw();
        }
    }

    lock(){
        for(let r = 0; r < this.activeTetromino.length; r++){
            for(let c = 0; c < this.activeTetromino[r].length; c++){
                if(!this.activeTetromino[r][c]){
                    continue;
                }

                if(this.y + r < 0){
                    alert('Game Over'); // Thông báo kết thúc trò chơi
                    gameOver = true;
                    break;
                }

                board[this.y + r][this.x + c] = this.color; // Lưu màu của mảnh vào bảng
            }
        }

        // Xử lý ăn điểm
        for(let r = 0; r < ROW; r++){
            let isFull = true;
            for(let c = 0; c < COL; c++){
                isFull = isFull && (board[r][c] != COLOR); // Kiểm tra hàng đầy
            }

            if(isFull){
                for (let y = r; y > 1; y--){
                    for(let c = 0; c < COL; c++){
                        board[y][c] = board[y - 1][c]; // Di chuyển hàng xuống
                    }
                }

                for(let c = 0; c < COL; c++){
                    board[0][c] = COLOR; // Xóa hàng trên cùng
                }

                score += 10; // Tăng điểm
            }
        }

        drawBoard(); // Vẽ lại bảng

        document.querySelector('#score').innerText = score; // Cập nhật điểm số
    }

    rotate(){
        let nextPattern = this.tetromino[(this.tetrominoN + 1) % this.tetromino.length]; // Mảnh tiếp theo
        let move = 0;

        if(this.collision(0, 0, nextPattern)){
            if(this.x > COL / 2) {
                move = -1; // Di chuyển sang trái
            } else {
                move = 1; // Di chuyển sang phải
            }
        }
        
        if(this.collision(0, 0, nextPattern)){
            this.unDraw();
            this.x += move;
            this.tetrominoN = (this.tetrominoN + 1) % this.tetromino.length; // Cập nhật chỉ số mảnh
            this.activeTetromino = this.tetromino[this.tetrominoN]; // Mảnh mới hoạt động
            this.draw(); // Vẽ mảnh mới
        }
    }

    collision(x, y, piece){
        for(let r = 0; r < piece.length; r++){
            for(let c = 0; c < piece[r].length; c++){
                if(!piece[r][c]){
                    continue;
                }

                let newX = this.x + c + x;
                let newY = this.y + r + y;

                if(newX < 0 ||  newX >= COL || newY >= ROW){
                    return true; // Va chạm với biên
                }
                if(newY <  0){
                    continue;
                }
                if(board[newY][newX] != COLOR){
                    return true; // Va chạm với ô đã được tô màu
                }
            }
        }
        return false; // Không va chạm
    }
}

// Định nghĩa các mảnh
const PIECES = [
    [S, "green"], // Mảnh S
    [T, "yellow"], // Mảnh T
    [O, "blue"], // Mảnh O
    [L, "purple"], // Mảnh L
    [I, "cyan"], // Mảnh I
    [J, "orange"] // Mảnh J
];

// Hàm tạo mảnh ngẫu nhiên
function randomPiece() {
    let r = Math.floor(Math.random() * PIECES.length); // Tạo số ngẫu nhiên
    return new Piece(PIECES[r][0], PIECES[r][1]); // Trả về mảnh ngẫu nhiên
}

let p = randomPiece(); // Tạo mảnh đầu tiên
console.log(p); // In mảnh ra console

// Xử lý sự kiện bàn phím
document.addEventListener('keydown', function(e) {
    if(e.keyCode == 37) {
        p.moveLeft(); // Di chuyển trái
    } else if(e.keyCode == 39) {
        p.moveRight(); // Di chuyển phải
    } else if(e.keyCode == 38) {
        p.rotate(); // Xoay
    } else if(e.keyCode == 40) {
        p.moveDown(); // Di chuyển xuống
    }
})

let gameOver = false; // Biến kiểm tra trò chơi đã kết thúc
let interval; // Khoảng thời gian

// Hàm rơi mảnh
function drop() {
    interval = setInterval(function() {
        if(!gameOver) {
            p.moveDown(); // Rơi mảnh xuống
        } else {
            clearInterval(interval); // Dừng khoảng thời gian
        }
    }, 900); // Thời gian rơi là 900ms
}

drop(); // Bắt đầu rơi mảnh
